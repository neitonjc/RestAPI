# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Java CI for Sonar Cloud analysis and generate .Jar with Maven

on:
  push:
    branches: [ "main" ]

jobs:

  sonarAnalysis:
    runs-on: ubuntu-latest
    steps:
      - name: Analyze with SonarCloud         
        # You can pin the exact commit or the version.
        # uses: SonarSource/sonarcloud-github-action@de2e56b42aa84d0b1c5b622644ac17e505c9a049
        uses: SonarSource/sonarcloud-github-action@de2e56b42aa84d0b1c5b622644ac17e505c9a049
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}   # Generate a token on Sonarcloud.io, add it to the secrets of this repo with the name SONAR_TOKEN (Settings > Secrets > Actions > add new repository secret)
        with:
          # Additional arguments for the sonarcloud scanner
          args:             
            # Unique keys of your project and organization. You can find them in SonarCloud > Information (bottom-left menu)
            # mandatory
            -Dsonar.projectKey=neitonjc_RestAPI
            -Dsonar.organization=neitonjc
            -Dsonar.java.binaries=restful/target/classes
            -Dsonar.language=java
            -Dsonar.sources=src/main/java/
            -Dsonar.projectBaseDir=restful
            # Comma-separated paths to directories containing main source files.
            # When you need the analysis to take place in a directory other than the one from which it was launched
            
            # Comma-separated paths to directories containing test source files.
            #-Dsonar.tests= # optional. For more info about Code Coverage, please refer to https://docs.sonarcloud.io/enriching/test-coverage/overview/
            # Adds more detail to both client and server-side analysis logs, activating DEBUG mode for the scanner, and adding client-side environment variables and system properties to the server-side log of analysis report processing.
            #-Dsonar.verbose= # optional, default is false

  build:
    runs-on: ubuntu-latest
    needs: sonarAnalysis
    steps:
    - name: Step 1 - Checkout main branch from GitHub
      uses: actions/checkout@v2
    
    - name: Step 2 - Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
        
    - name: Step 3 - Build with Maven
      run: mvn -B package --file restful/pom.xml
    
    - name: Step 4 - List the current directory
      run: ls -a
      
    - name: Step 5 - What is in the target folder?
      run: |
        cd restful/target
        ls -a
